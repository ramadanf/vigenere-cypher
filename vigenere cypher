#include <stdio.h>
#include <ctype.h>
#include <string.h>

char modChar(int a, int b) {
  return (a % b + b) % b;  // Handle negative remainders
}

char shiftChar(char c, char key, int isEncrypt) {
  int shift = (int)toupper(key) - 'A';  // Convert key to uppercase ASCII offset
  int offset = isEncrypt ? shift : -shift;

  int newAscii = c + offset;

  // Handle uppercase letters (ASCII 65-90)
  if (isalpha(c) && isupper(c)) {
    newAscii = modChar(newAscii - 'A', 26) + 'A';
  }

  // Handle lowercase letters (ASCII 97-122)
  else if (isalpha(c) && islower(c)) {
    newAscii = modChar(newAscii - 'a', 26) + 'a';
  }

  // Keep non-alphabetic characters unchanged
  return (char)newAscii;
}

void vigenereCipher(char* message, char* key, int isEncrypt) {
  int keyLen = strlen(key);
  int i = 0, j = 0;

  for (int k = 0; message[k] != '\0'; k++) {
    message[k] = shiftChar(message[k], key[j], isEncrypt);
    j = ++i % keyLen;  // Circularly iterate through the key
  }
}

int main() {
  char message[100];
  char key[50];
  int choice;

  printf("Enter a message: ");
  fgets(message, sizeof(message), stdin);

  printf("Enter a key (uppercase letters only): ");
  fgets(key, sizeof(key), stdin);
  key[strcspn(key, "\n")] = '\0';  // Remove trailing newline from key

  printf("1. Encrypt\n2. Decrypt\n");
  printf("Enter your choice: ");
  scanf("%d", &choice);

  if (choice == 1) {
    vigenereCipher(message, key, 1);
    printf("Encrypted message: %s\n", message);
  } else if (choice == 2) {
    vigenereCipher(message, key, 0);
    printf("Decrypted message: %s\n", message);
  } else {
    printf("Invalid choice\n");
  }

  return 0;
}
